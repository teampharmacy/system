generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}
 
model Report {
  reportID String   @id @default(cuid())
  time     DateTime
  salesTransactions SaleTransaction[]
}
 
model Payment {
  paymentID   String   @id @default(cuid())
  paymentType String
  amount      Float
  salesTransaction SaleTransaction[]  // Relation to SalesTransaction
}
 
model MedicineType {
  id       Int        @id @default(autoincrement()) // Primary key
  name     String     @unique                      // Name of the medicine type (e.g., tablet, syrup)
  medicines Medicine[]                             // Relationship to medicines
}
 
model Medicine {
  id              Int         @id @default(autoincrement()) // Primary key
  name            String                                  // Name of the medicine
  numberPurchased Int                                     // Total quantity purchased
  numberLeft      Int                                     // Quantity left in stock
  instruction     String?                                 // Instructions for use (optional)
  sideEffect      String?                                 // Possible side effects (optional)
  price           Float                                   // Price per unit
  typeId          Int                                     // Foreign key to MedicineType
  type            MedicineType @relation(fields: [typeId], references: [id]) // Relationship to MedicineType
  createdAt       DateTime    @default(now())             // Timestamp for when the record was created
  updatedAt       DateTime    @updatedAt                  // Timestamp for when the record was last updated
  saleItems       SaleItem[]
}
 
model SaleItem {
  id              Int           @id @default(autoincrement())
  quantity        Int
  price           Float
  medicineId      Int
  saleTransaction SaleTransaction @relation(fields: [saleTransactionId], references: [id])
  saleTransactionId Int
  medicine        Medicine      @relation(fields: [medicineId], references: [id]) 
}
 
model SaleTransaction {
  id            Int       @id @default(autoincrement())
  time          DateTime  @default(now())  // Timestamp when the sale was made
  amount        Float     // Total amount for the transaction
  saleItems     SaleItem[] // Relation to SaleItem
  reportID      String?    // Foreign key to Report
  report        Report?    @relation(fields: [reportID], references: [reportID]) // Relation to Report
 
  paymentID     String?    // Foreign key to Payment
  payment       Payment?   @relation(fields: [paymentID], references: [paymentID]) // Relation to Payment
}
 
model User {
  id        String    @id @default(uuid())
  email     String    @unique
  name      String?
  image     String?
  role      String    @default("user") // "user" or "admin"
  approved  Boolean   @default(false)
  accounts  Account[]
  sessions  Session[]

  @@index([email]) // Index to optimize email queries
}
 
model Account {
  id                 String   @id @default(uuid())
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider           String
  providerAccountId  String
  refresh_token      String?  // For OAuth providers
  access_token       String?  // For OAuth providers
  expires_at         Int?     // For OAuth providers
  token_type         String?  // For OAuth providers
  scope              String?  // For OAuth providers
  id_token           String?  // For OAuth providers
  session_state      String?  // For OAuth providers
  passwordHash       String?  // Add password hash for traditional auth
  @@unique([provider, providerAccountId]) // Ensures uniqueness of account
}
 
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}
 
model VerificationToken {
  id         String   @id @default(uuid())
  identifier String
  token      String   @unique
  expires    DateTime
 
  @@unique([identifier, token]) // Ensures uniqueness of verification token
}
